@using System.ComponentModel.DataAnnotations
<EditForm Model="@Person">
    <DataAnnotationsValidator/>
    @CreateComponent()
    <SfButton>Submit</SfButton>
</EditForm>

@code {

    [Parameter]
    [EditorRequired]
    public Person Person { get; set; } = default!;

    public RenderFragment CreateComponent()
    {
        var formFragments = new List<RenderFragment>();

        var proList = typeof(Person).GetProperties();
        foreach (var prp in proList)
        {
            Type T = prp.GetType();
            if (prp.GetCustomAttributes(typeof(DataTypeAttribute), false).Length != 0)
            {
                var attrList = (DataTypeAttribute) prp.GetCustomAttributes(typeof(DataTypeAttribute), false).First();
                var displayLabel = (DisplayAttribute) prp.GetCustomAttributes(typeof(DisplayAttribute), false).First();
    // Get the initial property value
                var propInfoValue = typeof(Person).GetProperty(prp.Name);
    // Create an expression to set the ValueExpression-attribute.
                var constant = System.Linq.Expressions.Expression.Constant(Person, typeof(Person));
                var exp = System.Linq.Expressions.Expression.Property(constant, prp.Name);
                switch (attrList.DataType)
                {
                    case DataType.Text:
                    case DataType.EmailAddress:
                    case DataType.PhoneNumber:
                    case DataType.MultilineText:
                    {
                        var value = propInfoValue?.GetValue(Person) as string ?? string.Empty;
                            formFragments.Add(CreateTextBox(propInfoValue?.GetValue(Person) as string ?? string.Empty));
                        break;
                    }
                    case DataType.Date:
                    {
                        formFragments.Add(CreateDatePicker((DateOnly)(propInfoValue?.GetValue(Person) ?? DateOnly.MaxValue)));
                        break;
                    }
                }
            }
        }

        RenderFragment result = _ =>
                                {
                                };
        formFragments.ForEach(r => result += r);
        return result;
    }

    private RenderFragment CreateDatePicker(DateOnly value) => @<SfDatePicker TValue="DateOnly" FloatLabelType="FloatLabelType.Auto" Value="@value" Readonly="true"/>;

    private RenderFragment CreateTextBox(string value) => @<SfTextBox FloatLabelType="FloatLabelType.Auto" Value="@value" Readonly="true"/>;

}